内核有一个分配内存的子系统-内核内存分配器（Kernel Memory Allocator，KMA）其致力于以下几个目标：
        1.快
        2.浪费内存降低到最小
        3.减少内存碎片
        4.能够被其他内存管理子系统调用
基于不同算法，有以下几种KMA:
        1.Buddy系统
        2.Solaris的Slab分配算法
        等等
内核为进程分配的虚拟内存地址空间包括以下几个部分：
        1.程序的可执行代码
        2.程序的初始化数据
        3.程序的未初始化数据
        4.初始程序栈（用户态栈）
        5.所需共享库的可执行代码和数据
        6.堆（程序动态请求的内存）
Unix操作系统的内存分配策略都是基于 请求调页。进程访问一个不存在页时，MMU产生一个异常，异常处理程序定位到受影响的内存区，为其分配一个空闲
页。并用适当的数据将其初始化。同理，当系统动态请求内存时，内核只会修改进程的堆内存大小，等到真正试图引用内存页时才会引起异常，并为其分配
页。
多核服务器中，所有CPU共享同一内存。RAM芯片可以由多CPU并发访问，但是RAM芯片上的读写操作必须串行执行，因此在每个RAM芯片之间会有一个硬件的“内存仲裁器”(memory arbiter)。memory arbiter 在RAM芯片空闲时就准许一个CPU访问，否则就延迟CPU访问。单核服务器的memory arbiter叫做DMA

