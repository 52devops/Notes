Fio-flexible I/O tester
能够产生多个线程或进程进行特殊类型的I/O动作。可以定义一个job然后模拟出I/O操作。一个job文件可以包含任意数量的线程或者文件。
规范的job文件中，使用"global"块定义都会使用到的参数，然后在其他一个或多个job描述块中定义jobs。当运行的时候，fio会分析这个文件，然后按照描述构建任务。
jobs文件分为几个部分
	I/O 类型：定义对文件进行I/O操作的类型。我们或许顺序度该文件，或者随机写该文件。也或者混合读写，混合顺序和随机。还可以设定是否做 buffered/direct/raw IO到专用的IO线程池中。
	Block Size：规定IO操作的块大小，可以是范围也可以是固定的值
	I/O Size：一共读写多少数据。
	I/O 引擎：定义如何IO的产生方式。
	I/O 深度：如果IO引擎为async，一个队列多大进行一次提交
	Target file/device：操作多少文件
	threads，processes和job的同步：一共产生多少线程或进程
上面的内容可以总结为，描述一个jobs 流程为， 什么样的IO方式，一次IO多大，一共IO多少，用什么样的IO引擎驱动，操作多少文件，线程和进程。
参数：
	name=str          
	该参数被用来覆盖job名，如果在命令行输入，该参数可以发出一个信号开始一个新的job。
	
	description=str
	没有特殊的其他用途，只是描述该job是做什么的
	
	directory=str
	文件名的前缀。文件放置的位置。可以通过':'符号从而指定多个目录。这些目录都会生成一个filename，并且克隆相同的JOB。如果设置的fio的文件名，那么只会使用第一个目录，如果没有指定，每次clone的时候都会生成一个文件。
	
	filename=str
	fio通常基于job名称、线程数以及文件数量来组成文件名。如果想在一个或多个job的线程间共享文件，那么要指定一个文件名。如果I/O引擎是基于文件的，那么可以指定一系列的文件，通过":"分隔。"-"是保留的符号，根据读/写的设置代表输入和输出。如果要使用":"需要用"\"
	
	filename_format=str
	如果在job间共享大量的文件，一般会用fio来生成相要的文件名。默认情况，fio会基于 job-name.jobnumer.filenumber的文件形式来生成文件。通过这个选项可以自己定义文件名的形式。Fio识别下面的相应变量。
	$jobname           线程或进程的名字
	$jobnum            线程或进程增加的数量
	$filenum           随着进程和线程而增加的文件数量
	例如 指定文件形式为  testfiles.$filenum那么当文件数为4时 会为  testfiles.4
	
	lockfile=str
	Fio默认在执行IO前是不锁任何文件的。如果一个文件或文件描述符被共享，fio可以对这些文件进行序列化的IO从而保证最后结果的一致性。这种方式通常用来模仿共享文件的真实负载。一般lock模式有下面几种
	none：不锁，默认
	exclusive：一次只允许一个线程或进程执行IO操作，拒绝其他
	readwrite：对文件进行读写锁死，可以同时读，但不能同时写
	
	opendir=str 
	递归打开目录
	
	readwrite=str,rw=str
	顺序读写用来计算吞吐量，随机4k写测量IOPS
	I/O的方式，可以接受的值有：
		read 顺序读
		write 顺序写
		trim   顺序trim(Linux 块设备)
		randread 随机读
		randwrite 随机写
		randtrim  随机trim
		rw，readwrite 融合了顺序读写
		randrw  融合了随机读写
		trimwrite 融合了Trim和write操作。块会先trim，然后该块在被写入
	在读写混合的情况下，默认读写操作各占一半(50%)。但在实际情况下会稍有偏差，毕竟这两种操作的速度是不同的。也可以指定IO的偏移量，器类型通过添加 ":<nr>"。比如说一个随机读 rw=randread:8,其偏移量为8。如果其后缀
	使用的是 顺序 IO的模式，那么在每次的IO操作时，都会加上这个偏移量。举个例子，使用rw=rwrite:4k 会在每次写操作时跳过4K。将顺序IO变成类似打孔似的IO。
	
	rw_sequencer=str
	如果在rw=str这行添加了偏移量，那么该选项将控制如何生存IO偏移量。可接受的变量有：
	sequential：生成顺序偏移量
	identical: 生成相同的偏移量
	sequential只对随机IO有效。随机IO时，fio每次IO会生成一个新的random 偏移量。如果设置randread偏移量为8，那么每8次IO,都得到一个新的随机的偏移量。所以得到的结果是8次IO的结果。因为顺序IO已经是有序的，对job设置顺序是不会对结果产生任何影响。
	
	kb_base=int
	设定kb的值，一般情况kb为2^10 也就是1024。但是存储厂商跟喜欢用10^3,1000。在某些情况下，当对此值有明确的要求时可以通过该参数设置，默认为1024
	
	unified_rw_reporting=bool
	fio会针操作数据类型方法的不同，而分别汇报。比如说 read、write及trim这些有关联的操作，会被分隔开了展现。如果该参数为true，那么这些信息都将汇总起来报道
	
	randrepeat=bool
	默认为True，随机I/O的pattern使用随机数生成器生成。使parttern是可重现的。
	
	allrandrepeat=bool
	所有东西都使用随机数生成器，使所有结果都可重新。默认为false
	
	randseed=int
	基于给定的seed值，来作为随机数生成器。使用这种方式可以控制生成的输出，如果没有设置该选项，随机序列取决randrepeat
	
	fallocate=str
	是否在生成文件时进行预分配。接受的值有：
		none：不预分配空间
		posix：	通过posix_fallocate方式预分配
		keep：	通过fallocate函数的FALLOC_FL_KEEP_SIZE设置来预分配
		0：		none别名
		1：		posix别名
	上述的函数功能不一定在所有平台上都能实现，'keep'只能用于Linux、如果是在Solaris的ZFS上必须使用'none'。默认为POSIX
	
	fadvise_hint=bool
	使用posix_fadvise来通知内核可能发生哪些类型的I/O    默认为true
	
	fadvise_stream=int
	使用posix_fadvise 来通知内核发生的写操作时属于哪个stream ID的。仅支持Linux。
	
	size=int
	这个job的总I/O大小。fio一直运行直到传输的字节达到设定的值。除非有其他参数限定(如，运行时间，或者增加减少io_size)。除非给出了nrfiles和filesize参数。，否则这个值将划分给job的生产的文件。如果没有设置这个值，fio会使用用户指定文件或设备的全部空间。
	如果这个文件不存在，那么就必须指定size值。这个值也可以设定为存储文件或设备容量的百分比(1%-100%)
	
	nrfiles=int
	执行该job任务。所用的文件数。默认为1
	
	openfiles=int
	同一时间能够打开的文件数，默认和nrfiles相同
	
	io_size=int.io_limit=int
	通常情况下fio在size规定的区域中进行相关操作，因此要同时设置IO的size和区域。通过这个参数可以不用进行这么繁琐的设置，可以仅对定义fio的IO数量。举个例子，如果一个size设置为20G，而io_limit设置为5G，fio会在20G的区域中执行IO操作，但当消耗5G后悔退出。
	与其相反，如果size设置为20G，而io_size为40G，那么fil会在20G的域中执行40G的IO
	
	file_device=bool,fill_fs=bool
	将size设置的非常大，直到硬盘上没有空间作为终止条件(ENOSPC)。只对顺序写有效，如果是一个read工作，那么会首先填满挂载点在做读操作。该操作对裸设备无效，因为在做这个操作时，要从文件系统中获取该挂载点的size。除此之外，对裸设备的写满以后，不会反回ENOSPC。
	
	filesize=irange
	有些文件size可能是一个范围值。fio可以在给定的范围内随机的选择文件的大小(受限于总size)。如果filesize没有指定，那么创建的文件size相同。
	
	file_append=bool
	在文件的末尾执行IO操作。一般的fio会在文件大小范围内进行操作。如果该参数设定，那么fio会在文件莫问进行附加操作。这种方式等价于设置一个文件大小的偏移量。如果是非常规文件则可以忽略该选项。
	
	blocksize=int[,int],bs=int[,int]
	设置I/O的块大小，默认为4K。可以按照 read、write、trim的格式来分别设定每项操作值的大小。如果其中一项为空，那就使用默认值。如果没有逗号，那么会使用最后一个值。
	
	blocksize_range=irange[,irange],bsrange=irange[,irange]
	指定I/O块大小的范围。通常情况下I/O大小，绝大多数都是范围的最小值，除非设置了blocksize_unaligned。如果只给了一个范围，那么write和read操作将同时使用。例子：1k-4k,2k-8k
	
	blocksize_unaligned,bs_unaligned
	如果设置了该参数，那么blocksize_range中的任何值可能会被用到。不适用与 direct I/O》因为涉及到对其扇区的问题。
	
	bssplit=str
	该选项能够对block size进行精细的控制，使其不只是分割块大小那么简单、通过这个选项可以设置混合块大小的权重。设置格式为bssplit=blocksize/percentage，如果要定义多个那么需要用冒号分割。例如：bssplit=4k/10:64k/50:32k/40 表明64k块占50%，4k块占10%，32k块占40%。bssplit也支持按照read和write分隔，分隔的方式类似于bs参数，read和write使用逗号分隔。
	
	blockalign=int[,int],ba=int[,int]
	配置随机IO 偏移量的对齐。默认使用最小的"blocksize"。对于direct IO来说最小边界一般位512b。此选项与文件的随机映射相互排斥，所以一般关闭该选项。
	
	bs_is_seq_rand=bool
	如果设置了该选项，fio会使用标准的 read,write，不包括random。random的read或者write将使用 WRITE blocksize设置，顺序read和write将使用REAEDblocksize。
	
	zero_buffers
	使用全零初始化buffers，默认情况使用随机数据填充buffer
	
	refill_buffers
	如果设置该选项，每次提交后都会重新填充IO buffer。默认情况只在初始化和数据复用时填充。只有在没有指定zero_buffers时该选项才有意义。如果开启了数据校验，那么refill_buffers是自动开启
	
	scramble_buffers=bool
	如果refill_buffers开销太大，并且使用重复数据删除方式，设置该选项可以对buffer区内容进行轻微修改，从而避免重复删除。该行为对块压缩是没有用的，但是能停止块的dedupe。默认是开的
	
	ioengine=str
	定义job如何发生IO操作，下面是可以使用的类型：
		sync：基于read和write的I/O，使用fseek定位IO的位置
		psync：基于pread和pwrite的I/O
		vsync：基于readv和writev的I/O，通过将临近的IO合并提交从而模仿队列。
		libaio：Linux原生的异步IO机制。定义引擎的特点参数
		posixaio：使用aio_read和aio_write的POSIX异步IO机制
		solarisaio：Solaris原生的异步IO机制
		windowsaio：Windows原生异步IO机制
		mmap：通过内存mmap映射文件，使用memcpy进行数据拷贝
		splice：使用splice和vmsplice从用户空间到内核的数据传递
		syslet-rw：使用syslet系统调用来产生规律的异步read/write
		sg：SCSI的sg v3 的I/O方式。也可以使用SG_IO ioctl做同步。如果是sg字符设备，会使用read、write做异步I/O
		null：不传输任何数据，只是假装在做。主要是以测试fio并且debug为主。
		net：通过网络传输，至于通过何种协议则取决于定义的协议参数。依赖于协议，文件名，主机名，端口。
		netsplice：类似于net，但是使用splice和vmsplice映射数据进行发送和接收，
		cpuio：不传输任何数据。而是根据cpuload和cpucycles参数记录CPU周期
		guasi：GUASI I/O引擎是用户空间系统调用异步IO的接口
		external：
		falloc：
		e4defrag：
		rbd：
		gfapi：
		gfapi_async：
		libhdfs：
		mtd：
	
	iopdepth=int
	操作文件的数量。当iodepth增加到大于1时，不会对同步io引擎造成影响(除了在使用verify_async时会造成较小的影响)。就算是异步，也可能因为操作系统的限制导致不能实现设定的深度。这种情况在Linux平台，使用libaio引擎，direct没有设置为1时可能出现，
	因为操作系统的缓冲区IO不是异步的。在输出结果时，注意IO深度的输出，以此来确认执行任务的深度是否是自己设定的。默认为1
	
	iodepth_batch=int
	一次提交I/O的数量，默认为iodepth的值
	
	iodepth_batch_complete=int
	定义一次检索多少个IO片。默认为1，意味着在检索内核时最小的IO数。IO检索会一直运行，直到达到iodepth_low的设定值。如果这个值设定为0，那么fio在生成更多的IO前，会经常检查时间的完成情况。使用更多的系统调用，会减少IO的延迟。
	
	iodepth_low=int
	该值设定何时再次填充队列。默认为：iodepth
	
	io_submit_mode=str
	这个参数将控制fio如何提交IO到IO引擎。默认是线性。这意味着fio的job线程是直接提交并且获得IO。如果设置为offload，那么job线程会offload IO到专用的IO线程池中。
	
	direct=bool
	如果为真，不缓存IO，直接写入。默认为false
	
	buffered=bool
	与direct相反，默认为true
	
	atomic=bool
	如果为true，会尝试使用原子的atomic direct IO，atomic的写入比较稳定。目前只有Linux支持
	
	group_reporting
	如果设置该值，那么在制定numjobs时会输出每组的情况，而不是每个job的情况
	
	thread
	使用该参数，会创建线程，而不是使用fork创建进程。
	
	numjobs=int
	执行相同工作任务的(线程/进程)克隆的数量。默认为1
	
	rate=int
	job使用的带宽，单位为bytes/sec。可以指定其单位。rate=500k，限制每次读和写500k。也可以将读写分离。rate=1m,500k，读1MB/S，写500KB/S。只限制写或者只限制读的写法如下可以写作"rate=,500k"或"rate=500k,"。
	
	ratemin=int
	无论如何都要保证最小的带宽。如果不满足会造成job退出。其类型和rate一模一样。同样可以只针对读或写操作。
	
	startdelay=irange
	在job开始后推迟多少秒执行。支持指定时间的单位。默认情况下单位省略。可以给定一个范围，让其随机选择。